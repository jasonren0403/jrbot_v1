package me.cqp.JRbot.modules.Arcaea;

import me.cqp.JRbot.Utils.misc.picutils;

import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStream;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import static me.cqp.Jrbot.CQ;

public class ArcResultPic {
    private static final String GENERATED_BY = "Generated by LetheBot v0.1.0";
//    private static final String BASE_PATH = "E:\\CQP-tuling\\酷Q Pro\\data\\image";
    private static final String BASE_PATH = new File(CQ.getAppDirectory(), "../../../../../data/image/").toPath().normalize().toString();
    private static final String SONG_BG_PATH = "arcaea/song/%s"; //CQ.image
    private static final String CHARACTER_PATH = "arcaea/char/%d"; //CQ.image
    private static Font f1, f2;
    private final ArcUser user;
    private final ArcScore score;
    private long fromQQ;
    private static final int picW = 512;
    private static final int picH = 512;
    private BufferedImage background;
    private Path buildPath;
    private final boolean hide;
    private static final DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static final InputStream _default_dark = ArcResultPic.class.getClassLoader().getResourceAsStream("imgs/bg_single_dark.jpg");
    private static final InputStream _default_light = ArcResultPic.class.getClassLoader().getResourceAsStream("imgs/bg_single_light.jpg");

    static {
        InputStream is = null, is2 = null;
        try {
            Path bp = Paths.get(BASE_PATH, "arcaea", "result_pic");
            if (!bp.toFile().exists()) {
                if (!bp.toFile().mkdirs()) CQ.logWarning("ArcResultPic", new IOException("result_pic create failed"));
            }
            is = ArcResultPic.class.getClassLoader().getResourceAsStream("fonts/Exo-Light.ttf");
            is2 = ArcResultPic.class.getClassLoader().getResourceAsStream("fonts/Kazesawa-Light.ttf");

            if (is != null && is2 != null) {
                f1 = Font.createFont(Font.TRUETYPE_FONT, is);
                f2 = Font.createFont(Font.TRUETYPE_FONT, is2);

                GraphicsEnvironment localGraphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
                localGraphicsEnvironment.registerFont(f1);
                localGraphicsEnvironment.registerFont(f2);
            }
        } catch (FontFormatException | IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != is) {
                    is.close();
                }
                if (null != is2) {
                    is2.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private InputStream get_random_default() {
        Random r = new Random();
        double c = r.nextDouble();
        if (c <= 0.4) {
            return _default_light;
        } else {
            return _default_dark;
        }
    }

    public ArcResultPic(ArcUser u, ArcScore s, boolean hide,long fromQQ) throws IOException {
        this.hide = hide;
        this.fromQQ = fromQQ;
        try {
            this.background = picutils.zoomImageTo(ImageIO.read(new File(BASE_PATH,
                            String.format(resolve_bg_path(s.getDifficulty() == (short) 3, "jpg"), s.getSong_id()))),
                    picH, picW);
        } catch (IOException e) {
            CQ.logWarning("ArcResultPic",
                    "Cannot find bg file in {}, using fallback",
                    new File(BASE_PATH,String.format(resolve_bg_path(s.getDifficulty() == (short) 3,
                            "jpg"),s.getSong_id())).getAbsolutePath()
                            );
            this.background = picutils.zoomImageTo((ImageIO.read(get_random_default()))
                    , picH, picW);
        }
        this.user = u;
        this.score = s;
        this.buildPath = Paths.get(BASE_PATH, "arcaea", "result_pic", new Date().getTime() + ".png");
    }

    public ArcResultPic(boolean hide) throws IOException {
        this.buildPath = Paths.get(BASE_PATH, "arcaea", "result_pic", "test_" + new Date().getTime() + ".png");
        this.hide = hide;
        this.background = picutils.zoomImageTo((ImageIO.read(get_random_default()))
                , picH, picW);
        this.user = ArcUser.sampleUser();
        this.score = ArcScore.sampleScore();
    }

    public ArcResultPic path(Path p) {
        this.buildPath = p;
        return this;
    }

    public ArcResultPic path(File f) {
        this.buildPath = f.toPath();
        return this;
    }

    public ArcResultPic drawPlayInfo(ArcScore s, boolean istest) {
//        System.out.println("doing play info");
        if (s == null) {
            s = this.score;
        }
        // data
        long _score = s.getScore();
        int _lost = s.getMiss_count();
        int _far = s.getNear_count();
        int _pure = s.getPerfect_count();
        int _big_pures = s.getShiny_perfect_count();
        short _clear_type = s.getClear_type();
        String _clear_type_str = ArcScore.clearTypeStr(_clear_type);
        Date d = s.getTime_played();

        String _song_name = s.getSong_name();
        if (_song_name.isEmpty() || _song_name.contains("<Error>")) _song_name = "<Undefined>";
        String _level;
        if (istest) _level = "[BYD 11+]"; // for test
            // for prod
        else {
            _level = ArcScore.getSongLevel(s.getDifficulty(), _song_name);
            if (_level.isEmpty()) _level = "[???]";
            else _level = '[' + Arcaea.intToStr_diff_mapping.get(s.getDifficulty()) + " " + _level + ']';
        }

        // draw

        Graphics2D g = (Graphics2D) this.background.getGraphics();
        Font playinfo = new Font("Kazesawa-Light", Font.ITALIC, 18);
        Font playinfo_normal = new Font("Kazesawa-Light", Font.PLAIN, 35);
        g.setColor(Color.black);
        g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_DEFAULT);
        //消除画图锯齿
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
//        g.drawRect(40, 180, 420, 250);
        // name and level
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, _song_name + _level),
                picutils.getWordHeight(playinfo, _song_name + _level), playinfo, Color.black, _song_name + _level),
                50, 170, null);
        // score
        String scr = ArcScore.formatScore(_score);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo_normal, scr),
                picutils.getWordHeight(playinfo_normal, scr), playinfo_normal, Color.black, scr),
                240, 200, null);
        // pure(+big_pures)
        String pure = _pure + "(+" + _big_pures + ")";
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, "Pure"),
                picutils.getWordHeight(playinfo, "Pure"), playinfo, Color.black, "Pure"), // color.cyan 太虚，看不清
                120, 260, null);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, pure),
                picutils.getWordHeight(playinfo, pure), playinfo, Color.black, pure),
                240, 260, null);
        // far
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, "Far"),
                picutils.getWordHeight(playinfo, "Far"), playinfo, Color.black, "Far"),
                120, 290, null);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, _far),
                picutils.getWordHeight(playinfo, _far), playinfo, _far == 1 && _lost == 0 ? new Color(255, 164, 51) : Color.black, String.valueOf(_far)),
                240, 290, null);
        // lost
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, "Lost"),
                picutils.getWordHeight(playinfo, "Lost"), playinfo, Color.black, "Lost"),
                120, 320, null);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, _lost),
                picutils.getWordHeight(playinfo, _lost), playinfo, _far == 0 && _lost == 1 ? new Color(255, 51, 51) : Color.black, String.valueOf(_lost)),
                240, 320, null);
        // play time
        String dateStr = format.format(d);
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, "Played at"),
                picutils.getWordHeight(playinfo, "Played at"), playinfo, Color.black, "Played at"),
                120, 360, null);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, dateStr),
                picutils.getWordHeight(playinfo, dateStr), playinfo, Color.black, dateStr),
                240, 360, null);

        // note count
        int total = _lost + _far + _pure;
        String desc = String.format("(total note count: %d + %d + %d = %d)", _lost, _far, _pure, total);
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, desc),
                picutils.getWordHeight(playinfo, desc), playinfo, Color.black, desc),
                150, 400, null);
        // warning message
        g.dispose();
        return this;
    }

    public ArcResultPic drawUserInfo(ArcUser u) {
//        System.out.println("doing user info");
        if (u == null) {
            u = this.user;
        }
        drawCharacter(u.getCharacter_id());
        drawRating(u.getRating());
        Graphics2D g = (Graphics2D) this.background.getGraphics();
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        String uname = u.getName();
        String ucode = ArcClient.getUcode(fromQQ);
        if (ucode.isEmpty()) {
            ucode = "<For test - do not add>";
//            ucode = "012345678";
        }
        if (this.hide) {
            ucode = ArcScore.hide(ucode);
            uname = ArcScore.hide(uname);
        }
        Rectangle rect = new Rectangle(250, 40);
        Color c = g.getColor();
        g.drawImage(this.centerString(rect.width, rect.height,
                new Font("Exo-light", Font.PLAIN, 25), Color.black, uname), 200, 40, null);
//        g.setColor(Color.black);
//        g.drawRect(200, 25, 250, 60);
//        g.drawRect(200, 100, 250, 60);
        g.setColor(c);
        g.drawImage(this.centerString(rect.width, rect.height,
                new Font("Exo-light", Font.PLAIN, 25), Color.black, ucode), 200, 75, null);
        g.dispose();
        return this;
    }

    private void drawRating(double rating) {
        String rating_str = ArcScore.formatRating(rating / 100);
        rating = Double.parseDouble(rating_str);
        Graphics2D g = (Graphics2D) this.background.getGraphics();
        BufferedImage bmi;
        URL url;
        if (this.hide || rating < 0) {
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_off.png");
        } else if (rating >= 0 && rating < 3.50) {
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_0.png");
        } else if (rating >= 3.50 && rating < 7.00)
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_1.png");
        else if (rating >= 7.00 && rating < 10.00)
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_2.png");
        else if (rating >= 10.00 && rating < 11.00)
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_3.png");
        else if (rating >= 11.00 && rating < 12.00)
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_4.png");
        else if (rating >= 12.00 && rating < 12.50)
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_5.png");
        else {  // rating >= 12.50
            url = this.getClass().getClassLoader().getResource("imgs/rating/rating_6.png");
        }
        try {
//            if(url!=null) {
            assert url != null;
            bmi = ImageIO.read(new File(url.getFile()));
            bmi = picutils.zoomImageTo(bmi, 80, 80);
            if (!this.hide && rating >= 0) {
                Graphics2D g2 = (Graphics2D) bmi.getGraphics();
                g2.setFont(new Font("Exo-Light", Font.PLAIN, 16));
                g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
                g2.drawString(rating_str, 20, 44);
            }
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g.drawImage(bmi, 90, 110, null);
//            }
//            throw new IOException("URL is null!");
        } catch (IOException e) {
            e.printStackTrace();
        }
        g.dispose();
    }

    private BufferedImage centerString(int boundWidth, int boundHeight, Font font, Color color, String str) {
        BufferedImage cover = new BufferedImage(boundWidth, boundHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D covered = (Graphics2D) cover.getGraphics();
        covered.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        covered.setColor(color);
        picutils.drawCenteredString(covered, str, new Rectangle(boundWidth, boundHeight), font);
        covered.dispose();
//        try{
//            ImageIO.write(cover,"png",new File("F://temp.png"));
//        }catch(IOException ignored){
//
//        }
        return cover;
    }

    private void drawCharacter(int cid) {
//        System.out.println("doing character");
        Graphics2D g = (Graphics2D) this.background.getGraphics();
        File f = new File(BASE_PATH, String.format(resolve_char_path(this.user.is_char_uncapped(), "png"), cid));
//        System.out.println(f.toString());
        if (!f.exists()) {
            f = Paths.get(BASE_PATH, "arcaea", "char", "unknown_icon.png").toFile();
        }
        try {
            BufferedImage img = ImageIO.read(f);
            img = picutils.zoomImage(img, 0.7f);
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g.drawImage(img, 40, 40, null);
            if (this.hide) {
                g.setColor(Color.black);
                g.fillRect(60, 90, 80, 25);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            g.dispose();
        }
    }

    public static String resolve_char_path(boolean isuncapped, String fileext) {
        return isuncapped ? CHARACTER_PATH + "u_icon." + fileext : CHARACTER_PATH + "_icon." + fileext;
    }

    public static String resolve_bg_path(boolean isbyd, String fileext) {
        return isbyd ? SONG_BG_PATH + "_byd." + fileext : SONG_BG_PATH + "." + fileext;
    }

    public ArcResultPic mask(Color maskColor, float alpha) {
        Graphics2D bgG2 = (Graphics2D) this.background.getGraphics();
        int paddingx = 10;
        int paddingy = 10;
        //遮罩层大小
        int coverWidth = this.background.getWidth() - 2 * paddingx;
        int coverHeight = this.background.getHeight() - 2 * paddingy;
        //遮罩层位置
        int coverX = paddingx;
        int coverY = paddingy;

        //创建遮罩层
        BufferedImage cover = new BufferedImage(coverWidth, coverHeight, BufferedImage.TYPE_INT_RGB);
        Graphics2D coverG2 = (Graphics2D) cover.getGraphics();
        coverG2.setColor(maskColor);
        coverG2.fillRect(0, 0, coverWidth, coverHeight);
        coverG2.dispose();

        //开启透明度
        bgG2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
        //描绘
        bgG2.drawImage(cover, coverX, coverY, coverWidth, coverHeight, null);
        //结束透明度
        bgG2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
        bgG2.dispose();
        return this;
    }

    public File build() throws IOException {
        return build(this.buildPath.toFile(), "png");
    }

    private File build(String outputFormat) throws IOException {
        return build(this.buildPath.toFile(), outputFormat);
    }

    private File build(File buildpath, String outputFormat) throws IOException {
        Graphics2D g = (Graphics2D) this.background.getGraphics();
        Font f = new Font("Monospaced", Font.PLAIN, 16);
        g.drawImage(this.centerString(picutils.getWordWidth(f, GENERATED_BY), picutils.getWordHeight(f, GENERATED_BY), f, Color.black, GENERATED_BY),
                200, 440, null);
        // generate time
        Date d = new Date();
        String dateStr = format.format(d);
        Font playinfo = new Font("Monospaced", Font.PLAIN, 14);
        g.setFont(playinfo);
        g.drawImage(this.centerString(picutils.getWordWidth(playinfo, "Generated at " + dateStr),
                picutils.getWordHeight(playinfo, "Generated at " + dateStr), playinfo, Color.black, "Generated at " + dateStr),
                200, 470, null);
        g.dispose();
        ImageIO.write(this.background, outputFormat, buildpath);
        return buildpath;
    }

    private File build(Path buildPath, String outputFormat) throws IOException {
        return build(buildPath.toFile(), outputFormat);
    }

    private File build(String buildPath, String outputFormat) throws IOException {
        return build(new File(buildPath), outputFormat);
    }

    public static void main(String[] args) throws IOException {
        long start = System.currentTimeMillis();
        ArcResultPic arp = new ArcResultPic(false);
        arp.path(new File("E://2.png"));
        arp.mask(Color.WHITE, 0.75f).drawUserInfo(null).drawPlayInfo(null, true)
                .build();
        long now = System.currentTimeMillis();
        System.out.println("Generate time: " + (now - start) + " ms");
    }
}
